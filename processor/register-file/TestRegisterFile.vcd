$date
	Mon Oct 14 12:43:49 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module TestRegisterFile $end
$var wire 8 ! out2 [7:0] $end
$var wire 8 " out1 [7:0] $end
$var wire 1 # clk $end
$var reg 8 $ dataIn [7:0] $end
$var reg 3 % inAddress [2:0] $end
$var reg 3 & out1Address [2:0] $end
$var reg 3 ' out2Address [2:0] $end
$var reg 1 ( reset $end
$var reg 1 ) write $end
$scope module clock $end
$var reg 1 # clk $end
$upscope $end
$scope module registerFile $end
$var wire 1 # clk $end
$var wire 8 * dataIn [7:0] $end
$var wire 3 + inAddress [2:0] $end
$var wire 8 , out1 [7:0] $end
$var wire 3 - out1Address [2:0] $end
$var wire 8 . out2 [7:0] $end
$var wire 3 / out2Address [2:0] $end
$var wire 1 ( reset $end
$var wire 1 ) write $end
$scope begin $ivl_for_loop0 $end
$var integer 32 0 i [31:0] $end
$upscope $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 1 i [31:0] $end
$upscope $end
$upscope $end
$scope module TestRegisterFile $end
$scope module registerFile $end
$var reg 8 2 \registerArray[0] [7:0] $end
$upscope $end
$upscope $end
$scope module TestRegisterFile $end
$scope module registerFile $end
$var reg 8 3 \registerArray[1] [7:0] $end
$upscope $end
$upscope $end
$scope module TestRegisterFile $end
$scope module registerFile $end
$var reg 8 4 \registerArray[2] [7:0] $end
$upscope $end
$upscope $end
$scope module TestRegisterFile $end
$scope module registerFile $end
$var reg 8 5 \registerArray[3] [7:0] $end
$upscope $end
$upscope $end
$scope module TestRegisterFile $end
$scope module registerFile $end
$var reg 8 6 \registerArray[4] [7:0] $end
$upscope $end
$upscope $end
$scope module TestRegisterFile $end
$scope module registerFile $end
$var reg 8 7 \registerArray[5] [7:0] $end
$upscope $end
$upscope $end
$scope module TestRegisterFile $end
$scope module registerFile $end
$var reg 8 8 \registerArray[6] [7:0] $end
$upscope $end
$upscope $end
$scope module TestRegisterFile $end
$scope module registerFile $end
$var reg 8 9 \registerArray[7] [7:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
bx 2
b1000 1
bx 0
bx /
bx .
bx -
bx ,
bx +
bx *
x)
x(
bx '
bx &
bx %
bx $
1#
bx "
bx !
$end
#5
0#
#8
1(
#10
1#
#11
b0 9
b0 8
b0 7
b0 6
b0 5
b0 4
b0 3
b0 2
b1000 0
#12
0(
#13
b1 '
b1 /
b0 &
b0 -
#15
b0 !
b0 .
b0 "
b0 ,
0#
#17
b11000 $
b11000 *
b0 %
b0 +
1)
#20
1#
#21
0)
b11000 2
#23
b11000 "
b11000 ,
#25
0#
#30
1#
#35
0#
#40
1#
